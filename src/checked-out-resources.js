"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodeFetch = require('node-fetch');
const tough = require('tough-cookie');
const node_html_parser_1 = require("node-html-parser");
const llcoopUrl = (pathAndQuery) => "https://sam.llcoop.org" + pathAndQuery;
const getCheckedOutItems = async (cred) => {
    const url = llcoopUrl("/patroninfo");
    const fetch = require('fetch-cookie/node-fetch')(nodeFetch, new tough.CookieJar());
    const response = await fetch(url, { method: "POST", body: `code=${cred.barcode}&pin=${cred.pin}`, headers: { "Content-Type": "application/x-www-form-urlencoded" } });
    const text = await response.text();
    const match = /\/patroninfo\~S\d+\/\d+\/items/ig.exec(text);
    if (match) {
        const itemsUrl = llcoopUrl(match[0]);
        const itemsResponse = await fetch(itemsUrl);
        const root = node_html_parser_1.parse(await itemsResponse.text());
        var result = root.querySelectorAll("tr.patFuncEntry").map((row) => {
            const get = (clazz) => {
                const selector = row.querySelector(clazz);
                return selector ? selector.structuredText : null;
            };
            const getAtt = (clazz, att) => {
                const selector = row.querySelector(clazz);
                return selector && selector.attributes ? selector.attributes[att] : null;
            };
            const renewed = get(".patFuncRenewCount");
            const { title, acknowledgements } = splitTitleAndAcknowledgements(get(".patFuncTitleMain"));
            return {
                who: cred.name,
                title,
                acknowledgements,
                image: generateImageUrl(getAtt(".patFuncTitle a", "href")),
                status: get(".patFuncStatus").replace(renewed, "").replace(/(\d\d-\d\d)-(\d\d)/, "20$2-$1").trim(),
                renewed,
            };
        });
        result.sort((a, b) => a.status < b.status ? -1 : (a.status === b.status ? 0 : 1));
        return result;
    }
    return [];
};
exports.handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const args = JSON.parse(event.body);
    const response = { results: new Array(args.credentials.length) };
    try {
        await Promise.all(args.credentials.map(async (cred, i) => {
            const x = await getCheckedOutItems(cred);
            response.results[i] = x;
        }));
        const flat = response.results.reduce((a, b) => a.concat(b), []);
        return { statusCode: 200, body: JSON.stringify({ results: flat }) };
    }
    catch (err) {
        return { statusCode: 500, body: JSON.stringify(err) };
    }
};
function generateImageUrl(href) {
    if (href) {
        var matches = /\/record=([a-zA-Z0-9]+)~/.exec(href);
        if (matches) {
            return llcoopUrl("/bookjacket?recid=" + matches[1]);
        }
    }
    return null;
}
function splitTitleAndAcknowledgements(s) {
    const slash = s.indexOf(" / ");
    if (slash >= 0) {
        return {
            title: s.substring(0, slash),
            acknowledgements: s.substring(slash + 3).split(" ; ")
        };
    }
    return { title: s };
}
//# sourceMappingURL=data:application/json;base64,