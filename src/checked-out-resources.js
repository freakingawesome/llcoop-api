"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodeFetch = require('node-fetch');
const tough = require('tough-cookie');
const node_html_parser_1 = require("node-html-parser");
const llcoopUrl = (pathAndQuery) => "https://sam.llcoop.org" + pathAndQuery;
const getCheckedOutItems = async (cred) => {
    const url = llcoopUrl("/patroninfo");
    const fetch = require('fetch-cookie/node-fetch')(nodeFetch, new tough.CookieJar());
    const response = await fetch(url, { method: "POST", body: `code=${cred.barcode}&pin=${cred.pin}`, headers: { "Content-Type": "application/x-www-form-urlencoded" } });
    const text = await response.text();
    const match = /\/patroninfo\~S\d+\/\d+\/items/ig.exec(text);
    if (match) {
        const itemsUrl = llcoopUrl(match[0]);
        const itemsResponse = await fetch(itemsUrl);
        const root = node_html_parser_1.parse(await itemsResponse.text());
        return root.querySelectorAll("tr.patFuncEntry").map((row) => {
            const get = (clazz) => {
                const selector = row.querySelector(clazz);
                return selector ? selector.structuredText : null;
            };
            const renewed = get(".patFuncRenewCount");
            return {
                who: cred.name,
                title: get(".patFuncTitleMain"),
                status: get(".patFuncStatus").replace(renewed, "").replace(/(\d\d-\d\d)-(\d\d)/, "20$2-$1").trim(),
                renewed,
            };
        });
    }
    return [];
};
exports.handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const args = JSON.parse(event.body);
    const response = { results: new Array(args.credentials.length) };
    try {
        await Promise.all(args.credentials.map(async (cred, i) => {
            const x = await getCheckedOutItems(cred);
            response.results[i] = x;
        }));
        const flat = response.results.reduce((a, b) => a.concat(b), []);
        return { statusCode: 200, body: JSON.stringify({ results: flat }) };
    }
    catch (err) {
        return { statusCode: 500, body: JSON.stringify(err) };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlZC1vdXQtcmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2hlY2tlZC1vdXQtcmVzb3VyY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN0Qyx1REFBeUM7QUFFekMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxZQUFvQixFQUFFLEVBQUUsQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLENBQUM7QUFFcEYsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsSUFBdUIsRUFBRSxFQUFFO0lBQzNELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNuRixNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLElBQUksQ0FBQyxPQUFPLFFBQVEsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFDLGNBQWMsRUFBQyxtQ0FBbUMsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUNuSyxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxNQUFNLEtBQUssR0FBRyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUQsSUFBSSxLQUFLLEVBQUU7UUFDVCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckMsTUFBTSxhQUFhLEdBQUcsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsd0JBQUssQ0FBQyxNQUFNLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRS9DLE9BQVEsSUFBWSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBTyxFQUFFLEVBQUU7WUFDdkUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFZLEVBQVcsRUFBRTtnQkFDcEMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNuRCxDQUFDLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUUxQyxPQUFPO2dCQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZCxLQUFLLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDO2dCQUMvQixNQUFNLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNsRyxPQUFPO2FBQ1IsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVXLFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBa0IsRUFBRTtJQUMvRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNmLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxxREFBcUQsRUFBRSxDQUFDO0tBQ3pGO0lBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsTUFBTSxRQUFRLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBRWpFLElBQUk7UUFDRixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQXVCLEVBQUUsQ0FBUyxFQUFFLEVBQUU7WUFDaEUsTUFBTSxDQUFDLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUUsQ0FBQztLQUNsRTtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztLQUN0RDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGVGZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTtcclxuY29uc3QgdG91Z2ggPSByZXF1aXJlKCd0b3VnaC1jb29raWUnKTtcclxuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdub2RlLWh0bWwtcGFyc2VyJztcclxuXHJcbmNvbnN0IGxsY29vcFVybCA9IChwYXRoQW5kUXVlcnk6IHN0cmluZykgPT4gXCJodHRwczovL3NhbS5sbGNvb3Aub3JnXCIgKyBwYXRoQW5kUXVlcnk7XHJcblxyXG5jb25zdCBnZXRDaGVja2VkT3V0SXRlbXMgPSBhc3luYyAoY3JlZDogTExDb29wQ3JlZGVudGlhbHMpID0+IHtcclxuICBjb25zdCB1cmwgPSBsbGNvb3BVcmwoXCIvcGF0cm9uaW5mb1wiKTtcclxuICBjb25zdCBmZXRjaCA9IHJlcXVpcmUoJ2ZldGNoLWNvb2tpZS9ub2RlLWZldGNoJykobm9kZUZldGNoLCBuZXcgdG91Z2guQ29va2llSmFyKCkpO1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IGBjb2RlPSR7Y3JlZC5iYXJjb2RlfSZwaW49JHtjcmVkLnBpbn1gLCBoZWFkZXJzOiB7XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwifSB9KTtcclxuICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gIGNvbnN0IG1hdGNoID0gL1xcL3BhdHJvbmluZm9cXH5TXFxkK1xcL1xcZCtcXC9pdGVtcy9pZy5leGVjKHRleHQpO1xyXG4gIGlmIChtYXRjaCkge1xyXG4gICAgY29uc3QgaXRlbXNVcmwgPSBsbGNvb3BVcmwobWF0Y2hbMF0pO1xyXG5cclxuICAgIGNvbnN0IGl0ZW1zUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpdGVtc1VybCk7XHJcbiAgICBjb25zdCByb290ID0gcGFyc2UoYXdhaXQgaXRlbXNSZXNwb25zZS50ZXh0KCkpO1xyXG5cclxuICAgIHJldHVybiAocm9vdCBhcyBhbnkpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ci5wYXRGdW5jRW50cnlcIikubWFwKChyb3c6YW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IGdldCA9IChjbGF6ejpzdHJpbmcpIDogc3RyaW5nID0+IHtcclxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHJvdy5xdWVyeVNlbGVjdG9yKGNsYXp6KTtcclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyBzZWxlY3Rvci5zdHJ1Y3R1cmVkVGV4dCA6IG51bGw7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZW5ld2VkID0gZ2V0KFwiLnBhdEZ1bmNSZW5ld0NvdW50XCIpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB3aG86IGNyZWQubmFtZSxcclxuICAgICAgICB0aXRsZTogZ2V0KFwiLnBhdEZ1bmNUaXRsZU1haW5cIiksXHJcbiAgICAgICAgc3RhdHVzOiBnZXQoXCIucGF0RnVuY1N0YXR1c1wiKS5yZXBsYWNlKHJlbmV3ZWQsIFwiXCIpLnJlcGxhY2UoLyhcXGRcXGQtXFxkXFxkKS0oXFxkXFxkKS8sIFwiMjAkMi0kMVwiKS50cmltKCksXHJcbiAgICAgICAgcmVuZXdlZCxcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gW107XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55ID0ge30pIDogUHJvbWlzZSA8YW55PiA9PiB7XHJcbiAgaWYgKCFldmVudC5ib2R5KSB7XHJcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6ICdpbnZhbGlkIHJlcXVlc3QsIHlvdSBhcmUgbWlzc2luZyB0aGUgcGFyYW1ldGVyIGJvZHknIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCBhcmdzID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcclxuICBjb25zdCByZXNwb25zZSA9IHsgcmVzdWx0czogbmV3IEFycmF5KGFyZ3MuY3JlZGVudGlhbHMubGVuZ3RoKSB9O1xyXG5cclxuICB0cnkge1xyXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgIGFyZ3MuY3JlZGVudGlhbHMubWFwKGFzeW5jIChjcmVkOiBMTENvb3BDcmVkZW50aWFscywgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeCA9IGF3YWl0IGdldENoZWNrZWRPdXRJdGVtcyhjcmVkKTtcclxuICAgICAgICByZXNwb25zZS5yZXN1bHRzW2ldID0geDtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZmxhdCA9IHJlc3BvbnNlLnJlc3VsdHMucmVkdWNlKChhLGIpID0+IGEuY29uY2F0KGIpLCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBib2R5OiBKU09OLnN0cmluZ2lmeSh7cmVzdWx0czpmbGF0fSkgfTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZXJyKX07XHJcbiAgfVxyXG59O1xyXG5cclxuaW50ZXJmYWNlIExMQ29vcENyZWRlbnRpYWxzIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgYmFyY29kZTogc3RyaW5nO1xyXG4gIHBpbjogc3RyaW5nO1xyXG59Il19